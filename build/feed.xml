<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-02-28T15:17:07+01:00</updated><id>http://localhost:4000/</id><title type="html">David Pfahler</title><subtitle>I am a German legal assessor, software engineer, and data scientist.</subtitle><entry><title type="html">How to train a fastai model and run it on iOS</title><link href="http://localhost:4000/fastai-in-ios" rel="alternate" type="text/html" title="How to train a fastai model and run it on iOS" /><published>2019-10-31T00:00:00+01:00</published><updated>2019-10-31T00:00:00+01:00</updated><id>http://localhost:4000/fastai-in-ios</id><content type="html" xml:base="http://localhost:4000/fastai-in-ios">&lt;p&gt;This post covers an end-to-end example project of training a resnet model with &lt;a href=&quot;https://www.fast.ai&quot;&gt;fastai&lt;/a&gt; and &lt;a href=&quot;https://pytorch.org/&quot;&gt;PyTorch&lt;/a&gt;, converting it to &lt;a href=&quot;https://developer.apple.com/documentation/coreml&quot;&gt;CoreML&lt;/a&gt; and running it inside a &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;react-native&lt;/a&gt; iOS app.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Find the &lt;a href=&quot;https://github.com/davidpfahler/react-native-ml-app/blob/e4abc813f2c3e7e147454afbcbb4edd14c9ffe16/train_dog_classifier_with_fastai_export_to_CoreML.ipynb&quot;&gt;notebook&lt;/a&gt; and code in the &lt;a href=&quot;http://davidpfahler.github.io/react-ml-app&quot;&gt;GitHub repository&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My &lt;a href=&quot;/fastai-in-the-browser&quot;&gt;last article&lt;/a&gt; covered how to train a model in fastai and convert it to ONNX to run it in the browser using onnxjs and React.js. This post goes one step further and into a slightly different direction: The goal is to create a react-native iOS app, that performs the classification of dog breeds locally on the iPhone using CoreML. If you did not read my &lt;a href=&quot;/fastai-in-the-browser&quot;&gt;last article&lt;/a&gt; yet, I would recommend you catch up, because the following will assume you know about the training and exporting to ONNX parts already.&lt;/p&gt;

&lt;h2 id=&quot;converting-the-model-from-onnx-to-coreml&quot;&gt;Converting the model from ONNX to CoreML&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;See the notebook &lt;a href=&quot;https://github.com/davidpfahler/react-native-ml-app/blob/e4abc813f2c3e7e147454afbcbb4edd14c9ffe16/train_dog_classifier_with_fastai_export_to_CoreML.ipynb#Export-to-ONNX&quot;&gt;section “Export to ONNX”&lt;/a&gt; and onwards.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;PyTorch has built-in support for export to ONNX. For details see &lt;a href=&quot;/fastai-in-the-browser&quot;&gt;my previous blog post&lt;/a&gt;. Going from ONNX to CoreML requires &lt;a href=&quot;https://github.com/apple/coremltools&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;coremltools&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/onnx/onnx-coreml&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onnx-coreml&lt;/code&gt;&lt;/a&gt;. At first glance you might think that exporting using &lt;code class=&quot;highlighter-rouge&quot;&gt;onnx-coreml&lt;/code&gt; is simply, but at least in this particular case, it wasn’t so straigt forward. Firstly, you need to keep in mind how you normalize your input. In other frameworks it is common to perform normalization before input data is given to the model. In CoreML, at least to my limited knowledge (see &lt;a href=&quot;https://github.com/onnx/onnx-coreml/issues/338&quot;&gt;this onnx-coreml issues for reference&lt;/a&gt;), it seems that normalization is in the input layer of the CoreML model. When we naively export a PyTorch model, it does not have such a normalization input layer.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip: Use &lt;a href=&quot;https://github.com/lutzroeder/Netron&quot;&gt;Netron&lt;/a&gt; to visualize your model architecture.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you convert the ONNX model to CoreML, you need to provide an &lt;code class=&quot;highlighter-rouge&quot;&gt;image_input_names&lt;/code&gt; parameter so the model knows which layer is the input layer that receives raw image data. This parameter takes a list of strings, which in this case is just the name of the first layer. But what is that name? To find that out quickly and easily, I used &lt;a href=&quot;https://github.com/lutzroeder/Netron&quot;&gt;Netron&lt;/a&gt;. This program allows you to visualize your ONNX network easily and displays the name of the layer when you click on it.&lt;/p&gt;

&lt;p&gt;Back to normalization: The bias can be accomplished by providing the &lt;code class=&quot;highlighter-rouge&quot;&gt;preprocessing_args&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;convert&lt;/code&gt; function of &lt;code class=&quot;highlighter-rouge&quot;&gt;onnx-coreml&lt;/code&gt;, but to scale the inputs correctly, we need to add a layer to the beginning of our (now ONNX) model. To do that we first convert the ONNX model to CoreML using &lt;code class=&quot;highlighter-rouge&quot;&gt;onnx-coreml&lt;/code&gt; and then use &lt;code class=&quot;highlighter-rouge&quot;&gt;coremltools&lt;/code&gt; to load and modify this CoreML model. This is explained more in-depth in &lt;a href=&quot;https://colab.research.google.com/drive/1hxpSDrL3lTZC2QDvcaQzscGLOAZSTnQC#scrollTo=NFThHbIfbmHU&quot;&gt;this notebook&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;integrating-the-model-in-a-react-native-ios-app&quot;&gt;Integrating the model in a react-native iOS app&lt;/h2&gt;

&lt;p&gt;First, I tried to use the &lt;a href=&quot;https://github.com/rhdeck/react-native-coreml&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-coreml&lt;/code&gt;&lt;/a&gt; native module. Unfortunately, I couldn’t get it work. So I borrowed from it and the &lt;a href=&quot;https://facebook.github.io/react-native/docs/native-modules-ios&quot;&gt;react-native docs on Native Modules&lt;/a&gt; to create my own native module that did &lt;a href=&quot;https://github.com/davidpfahler/react-native-ml-app/blob/e4abc813f2c3e7e147454afbcbb4edd14c9ffe16/src/CoreMLNativeModule.js&quot;&gt;exactly why and I needed&lt;/a&gt; and no more.&lt;/p&gt;

&lt;p&gt;One more take away: If you can, stick to Objective-C instead of using Swift via a bridge like I did. It seems like the necesary Swift libraries blow up the bundle size by about 200MB.&lt;/p&gt;

&lt;p&gt;For the react-native app, I used &lt;a href=&quot;https://github.com/callstack/react-native-paper&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-paper&lt;/code&gt;&lt;/a&gt; for a few UI elements and &lt;a href=&quot;https://github.com/react-native-community/react-native-camera&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-camera&lt;/code&gt;&lt;/a&gt; to capture pictures. &lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-camera&lt;/code&gt; needs a little more effort than one would think. It exposes a very bare-bones API, which is super flexible, but does not provide a lot of convenience out-of-the-box. For example, you need to design and code your own trigger button. All that the plugin provides is the raw camera signal and APIs to take a picture or record video. Fortunately, they have &lt;a href=&quot;https://github.com/react-native-community/react-native-camera/tree/master/examples&quot;&gt;examples&lt;/a&gt;, but you have to know to look there.&lt;/p&gt;

&lt;h2 id=&quot;feedback-welcome&quot;&gt;Feedback welcome&lt;/h2&gt;

&lt;p&gt;I could and want to say a lot more about the joys and pains of making this little project, but I also want to get this information out there as soon as possible. So if you have any specific questions, suggestions or recommendations, please do not hesitate to contact me on twitter &lt;a href=&quot;https://twitter.com/davidpfahler&quot;&gt;@davidpfahler&lt;/a&gt;. I almost certainly made mistakes in the implementation or explanation, so if you find any, please let me know!&lt;/p&gt;

&lt;p&gt;I also created a thread on the &lt;a href=&quot;https://forums.fast.ai/t/running-a-fastai-model-in-ios-using-coreml/57553&quot;&gt;fastai forums&lt;/a&gt;, so if you are active there, please join the discussion!&lt;/p&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;I want to thank first and foremost the amazing team at fast.ai and the community at the &lt;a href=&quot;https://forums.fast.ai&quot;&gt;fast.ai forums&lt;/a&gt;, who are always most helpful. This little pet project obiously stands on the shoulders of (open-source) giants. Thanks to all of them!&lt;/p&gt;</content><author><name>David Pfahler</name></author><summary type="html">This post covers an end-to-end example project of training a resnet model with fastai and PyTorch, converting it to CoreML and running it inside a react-native iOS app.</summary></entry><entry><title type="html">How to train a fastai model and run it in the browser</title><link href="http://localhost:4000/fastai-in-the-browser" rel="alternate" type="text/html" title="How to train a fastai model and run it in the browser" /><published>2019-10-14T00:00:00+02:00</published><updated>2019-10-14T00:00:00+02:00</updated><id>http://localhost:4000/fastai-in-the-browser</id><content type="html" xml:base="http://localhost:4000/fastai-in-the-browser">&lt;p&gt;This post covers an end-to-end example project of training a resnet model with &lt;a href=&quot;https://www.fast.ai&quot;&gt;fastai&lt;/a&gt; and &lt;a href=&quot;https://pytorch.org/&quot;&gt;PyTorch&lt;/a&gt;, exporting it to &lt;a href=&quot;https://onnx.ai/&quot;&gt;ONNX&lt;/a&gt; and running it in the browser inside a &lt;a href=&quot;https://reactjs.org&quot;&gt;React.js&lt;/a&gt; app.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Try the &lt;a href=&quot;http://davidpfahler.github.io/react-ml-app&quot;&gt;demo&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Beginner-friendly tutorials for &lt;a href=&quot;https://course.fast.ai&quot;&gt;training a deep learning model with fast.ai&lt;/a&gt;, &lt;a href=&quot;https://pytorch.org/docs/master/onnx.html&quot;&gt;exporting a PyTorch model to ONNX&lt;/a&gt; or &lt;a href=&quot;https://reactjs.org/tutorial/tutorial.html&quot;&gt;creating a frontend web app with React.js&lt;/a&gt; are widely available, but when it comes to combining these different steps into a real project, information is more scarce. Hence, the goal of this post (and the accompanying &lt;a href=&quot;https://github.com/davidpfahler/react-ml-app/blob/master/train_dog_classifier_with_fastai_export_to_ONNX.ipynb&quot;&gt;notebook&lt;/a&gt; and &lt;a href=&quot;https://github.com/davidpfahler/react-ml-app&quot;&gt;repository&lt;/a&gt;) is to close this gap and show you how the training, export and deployment of a (close to) state-of-the-art deep learning model that runs in any modern web browser with a useable user interface comes together.&lt;/p&gt;

&lt;h2 id=&quot;train-a-resnet-with-fastai-and-export-to-onnx&quot;&gt;Train a resnet with fastai and export to ONNX&lt;/h2&gt;

&lt;p&gt;This post assumes that you are familiar with training a model using fastai in general. If you are new to fastai, I wholeheartedly recommend their &lt;a href=&quot;https://course.fast.ai&quot;&gt;free MOOC&lt;/a&gt;. The training process used is described in and can be reproduced with &lt;a href=&quot;https://github.com/davidpfahler/react-ml-app/blob/master/train_dog_classifier_with_fastai_export_to_ONNX.ipynb&quot;&gt;this jupyter notebook&lt;/a&gt;. The notebook also includes the export to ONNX, which is a &lt;a href=&quot;https://pytorch.org/docs/master/onnx.html&quot;&gt;built-in feature of PyTorch&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;run-the-model-in-the-browser&quot;&gt;Run the model in the browser&lt;/h2&gt;

&lt;p&gt;Deployment of the model to the browser also requires a web app that accepts the input data – in this case an image – and displays the predictions. You can quickly create a react app using &lt;a href=&quot;https://create-react-app.dev/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt;&lt;/a&gt;. To get a somewhat nice looking UI going, this project uses the &lt;a href=&quot;https://material-ui.com&quot;&gt;MATERIAL-UI framework&lt;/a&gt;, which provides a lot of useful components. You can find the full source code of this project in the &lt;a href=&quot;https://github.com/davidpfahler/react-ml-app&quot;&gt;project’s GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Loading and running the model is achieved with &lt;a href=&quot;https://github.com/microsoft/onnxjs/&quot;&gt;onnxjs&lt;/a&gt;. Here are some tips when using onnxjs:&lt;/p&gt;

&lt;h3 id=&quot;model-warm-up&quot;&gt;Model warm-up&lt;/h3&gt;

&lt;p&gt;While you &lt;a href=&quot;https://github.com/davidpfahler/react-ml-app/blob/68bcc5005d9e0de390602fd0cdb9676d6d6da341/src/components/utils.js#L37&quot;&gt;load the model&lt;/a&gt;, you most likely want to display a loading indicator to the user. I would recommend you also &lt;a href=&quot;https://github.com/davidpfahler/react-ml-app/blob/68bcc5005d9e0de390602fd0cdb9676d6d6da341/src/components/utils.js#L27-L33&quot;&gt;warm-up the model&lt;/a&gt; right after loading and keep the loading indicator shown to the user. The warm-up is simply the very first forward pass (i.e. inference) on the loaded model. This will make the inference much faster the second time. So for a smooth user experience, it can make sense to load and warm-up at the start so that running the model is subsequently much faster. Warm-up can be performed using a &lt;a href=&quot;https://github.com/davidpfahler/react-ml-app/blob/68bcc5005d9e0de390602fd0cdb9676d6d6da341/src/components/utils.js#L29&quot;&gt;random input tensor&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;loading-the-input-image-tensor&quot;&gt;Loading the input image tensor&lt;/h3&gt;

&lt;p&gt;Getting an input image into a tensor format is somewhat tricky in the browser. I use an HTML dropzone, which can handle drag &amp;amp; dropped files as well as a regular file choser dialog. If you are using react, I recommend the &lt;a href=&quot;https://github.com/react-dropzone/react-dropzone&quot;&gt;react-dropzone&lt;/a&gt; component. Once an image file is dropped there, you will need to &lt;a href=&quot;https://github.com/react-dropzone/react-dropzone&quot;&gt;load the image file to a &lt;code class=&quot;highlighter-rouge&quot;&gt;canvas&lt;/code&gt;&lt;/a&gt;, which seems to be the only way to get the raw image data from an encoded file like a JPG in JavaScript.&lt;/p&gt;

&lt;h3 id=&quot;preprocessing-the-input-tensor&quot;&gt;Preprocessing the input tensor&lt;/h3&gt;

&lt;p&gt;Make sure that you are &lt;a href=&quot;https://github.com/davidpfahler/react-ml-app/blob/68bcc5005d9e0de390602fd0cdb9676d6d6da341/src/components/utils.js#L54-L73&quot;&gt;normalizing the input tensor&lt;/a&gt; using the same statistics that you used when training your model. In this case, these were the &lt;code class=&quot;highlighter-rouge&quot;&gt;imagenet_stats&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;interpreting-the-outputmap&quot;&gt;Interpreting the &lt;code class=&quot;highlighter-rouge&quot;&gt;outputMap&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Running the model asynchronously returns an array of numbers, which has the same length as your classifier has classes. Each number thus representens the activation for a given class. To interpret this result, I selected only the top five activations and then &lt;a href=&quot;https://github.com/davidpfahler/react-ml-app/blob/master/src/components/Predictions.js#L6-L24&quot;&gt;computed a percentage “probability”&lt;/a&gt;. Note that this isn’t exactly scientific, but gives the user an idea of how confident the model is when making a prediction.&lt;/p&gt;

&lt;h2 id=&quot;demo-time-try-it-out&quot;&gt;Demo time: Try it out!&lt;/h2&gt;

&lt;p&gt;Try out &lt;a href=&quot;http://davidpfahler.github.io/react-ml-app&quot;&gt;the live demo version of the dog breed classifier&lt;/a&gt;! It should work in all modern browsers, but depending on the hardware, especially on low-end phones, it might not be able to load or run the model. Be aware that the model itself is about 48MB is size, so you probably want to have a good connection.&lt;/p&gt;

&lt;p&gt;The best part: none of the images you give to the classifer ever leave your device! All of the inference is done locally, in your browser.&lt;/p&gt;

&lt;h2 id=&quot;feedback-welcome&quot;&gt;Feedback welcome&lt;/h2&gt;

&lt;p&gt;I could and want to say a lot more about the joys and pains of making this little project, but I also want to get this information out there as soon as possible. So if you have any specific questions, suggestions or recommendations, please do not hesitate to contact me on twitter &lt;a href=&quot;https://twitter.com/davidpfahler&quot;&gt;@davidpfahler&lt;/a&gt;. I almost certainly made mistakes in the implementation or explanation, so if you find any, please let me know!&lt;/p&gt;

&lt;p&gt;I also created a thread on the &lt;a href=&quot;https://forums.fast.ai/t/how-to-run-a-fastai-model-in-the-browser/56571&quot;&gt;fastai forums&lt;/a&gt;, so if you are active there, please join the discussion!&lt;/p&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;I want to thank first and foremost the amazing team at fast.ai and the community at the &lt;a href=&quot;https://forums.fast.ai&quot;&gt;fast.ai forums&lt;/a&gt;, who are always most helpful. This little pet project obiously stands on the shoulders of (open-source) giants. Thanks to all of them!&lt;/p&gt;</content><author><name>David Pfahler</name></author><summary type="html">This post covers an end-to-end example project of training a resnet model with fastai and PyTorch, exporting it to ONNX and running it in the browser inside a React.js app.</summary></entry><entry><title type="html">Understanding and Building a GraphQL Server</title><link href="http://localhost:4000/understanding-graphql-server" rel="alternate" type="text/html" title="Understanding and Building a GraphQL Server" /><published>2015-07-22T12:18:00+02:00</published><updated>2015-07-22T12:18:00+02:00</updated><id>http://localhost:4000/understanding-graphql-server</id><content type="html" xml:base="http://localhost:4000/understanding-graphql-server">&lt;p&gt;If you are trying to build a GraphQL server today, you don’t have much
choice: You pretty much have to use the reference implementation
&lt;a href=&quot;https://github.com/graphql/graphql-js&quot;&gt;graphql-js&lt;/a&gt;. The problem is, though, that there is almost no
documentation for it, yet.&lt;/p&gt;

&lt;p&gt;GraphQL has created quite some hype which led to a lot of pseudo code and
speculation flying around. We tried to build a GraphQL server with
graphql-js and will release an example project soon. However, we thought
we would share our findings right now, so others don’t have to dig in
the source code themselves.&lt;/p&gt;

&lt;p&gt;First of all, we want to point you to the excellent articles at
&lt;a href=&quot;https://github.com/mugli/learning-graphql&quot;&gt;mugli/learning-graphql&lt;/a&gt; by &lt;a href=&quot;https://github.com/mugli&quot;&gt;@mugli&lt;/a&gt;. Chapters
are being added over time, so this collection will only get better. If
you want to start learning GraphQL, look no further.&lt;/p&gt;

&lt;p&gt;So, here are some things we wished someone had emphasised or explicitly
stated:&lt;/p&gt;

&lt;h2 id=&quot;a-graphql-server-has-one-schema&quot;&gt;A GraphQL server has &lt;em&gt;one schema&lt;/em&gt;.&lt;/h2&gt;

&lt;p&gt;The canonical way to resolve a GraphQL query is as follows, where
&lt;code class=&quot;highlighter-rouge&quot;&gt;query&lt;/code&gt; is the GraphQL query &lt;em&gt;string&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-graphql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;graphql(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;here&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The fact that a) you have to supply the schema to the &lt;code class=&quot;highlighter-rouge&quot;&gt;graphql&lt;/code&gt; function
here and b) all the examples call it something relatively specific like
&lt;code class=&quot;highlighter-rouge&quot;&gt;BlogSchema&lt;/code&gt; led us to believe that there could potentially be multiple
schemas. We would then also need a method of choosing which schema to
use based on the contents of the request, which of course led to more
confusion, as there should only be a single endpoint.&lt;/p&gt;

&lt;p&gt;So, a GraphQL server has a single schema.&lt;/p&gt;

&lt;h2 id=&quot;this-schema-has-one-query-andor-one-mutation-parameter&quot;&gt;This schema has &lt;em&gt;one query&lt;/em&gt; and/or &lt;em&gt;one mutation&lt;/em&gt; parameter.&lt;/h2&gt;

&lt;p&gt;The values for these two parameters are &lt;code class=&quot;highlighter-rouge&quot;&gt;GraphQLObjectType&lt;/code&gt;s. We
will get to what that means in just a second. Because a mutation is
basically a “query with side effects”, from here on we will only talk
about &lt;code class=&quot;highlighter-rouge&quot;&gt;query&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-graphql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GraphQLSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RootQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RootMutation&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;RootQuery&lt;/code&gt; is just an ordinary &lt;code class=&quot;highlighter-rouge&quot;&gt;GraphQLObjectType&lt;/code&gt;. This kind of
type has a &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fields&lt;/code&gt; property and each field can have a
&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt; function property. Hence, you construct
your schema for both query and mutation by nesting GraphQL types. The
&lt;code class=&quot;highlighter-rouge&quot;&gt;RootQuery&lt;/code&gt; is thus just the top-most GraphQL type, but per-se nothing
special.&lt;/p&gt;

&lt;p&gt;This did surprise us, because we were under the impression that you
could have multiple root types, as some earlier articles suggested.
Well, you cannot — any more. In fact, the GraphQL spec evolved to only
allow one root type per operation (query or mutation), but it used to
allow multiple root types. Now, all your client-side queries need to
fit into this one GraphQL type (respectively it’s fields).&lt;/p&gt;

&lt;h2 id=&quot;the-name-you-give-to-your-root-graphql-type-is-arbitrary&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; you give to your root GraphQL type is arbitrary.&lt;/h2&gt;

&lt;p&gt;Because there is only one root type, it really doesn’t matter what name
you give to it. We call it &lt;code class=&quot;highlighter-rouge&quot;&gt;Query&lt;/code&gt; by convention.&lt;/p&gt;

&lt;div class=&quot;language-graphql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;RootQuery&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;GraphQLObjectType(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;fields-on-the-root-type-are-your-public-api&quot;&gt;Fields on the root type are your “public API”.&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; &lt;a href=&quot;https://github.com/dschafer&quot;&gt;@dschafer&lt;/a&gt; expanded the GraphQL README to better explain this
in &lt;a href=&quot;https://github.com/facebook/graphql/pull/66&quot;&gt;PR #66&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The only way to access or mutate data is by accessing fields of the
root (i.e. top-most) GraphQL type. Let’s say you constructed the
following schema:&lt;/p&gt;

&lt;div class=&quot;language-graphql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;BlogAuthor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;GraphQLObjectType(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GraphQLString&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GraphQLString&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;BlogArticle&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;GraphQLObjectType(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GraphQLNonNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GraphQLString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isPublished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GraphQLBoolean&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BlogAuthor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GraphQLString&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GraphQLString&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GraphQLList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GraphQLString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;RootQuery&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;GraphQLObjectType(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BlogArticle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GraphQLID&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetches&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;an&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;including&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GraphQLSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RootQuery&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a mouth-full. What is happening here? The &lt;code class=&quot;highlighter-rouge&quot;&gt;RootQuery&lt;/code&gt; defines
only one field, namely &lt;code class=&quot;highlighter-rouge&quot;&gt;article&lt;/code&gt; of type &lt;code class=&quot;highlighter-rouge&quot;&gt;BlogArticle&lt;/code&gt; with an argument
called &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;BlogArticle&lt;/code&gt; type is — like &lt;code class=&quot;highlighter-rouge&quot;&gt;RootQuery&lt;/code&gt; — a
&lt;code class=&quot;highlighter-rouge&quot;&gt;GraphQLObjectType&lt;/code&gt;. It, again, defines fields, among others, the
&lt;code class=&quot;highlighter-rouge&quot;&gt;author&lt;/code&gt; field of type &lt;code class=&quot;highlighter-rouge&quot;&gt;BlogAuthor&lt;/code&gt;. And now we finally get down to
the lowest level, as the fields on &lt;code class=&quot;highlighter-rouge&quot;&gt;BlogAuthor&lt;/code&gt; are all GraphQL
primitives.&lt;/p&gt;

&lt;p&gt;Now notice that — in this setup — you cannot access an author directly.
The only way to access this type and its fields is via the &lt;code class=&quot;highlighter-rouge&quot;&gt;article&lt;/code&gt;
field on the &lt;code class=&quot;highlighter-rouge&quot;&gt;RootQuery&lt;/code&gt; type. This is why you could consider the root
type your public API.&lt;/p&gt;

&lt;p&gt;If you wanted to expose the authors directly, you’d need to add an
author field (possibly with args like &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;) to the &lt;code class=&quot;highlighter-rouge&quot;&gt;fields&lt;/code&gt; object of
the &lt;code class=&quot;highlighter-rouge&quot;&gt;RootQuery&lt;/code&gt;. Please note that in the example above the &lt;code class=&quot;highlighter-rouge&quot;&gt;article&lt;/code&gt;
function fetches an article object that has an &lt;code class=&quot;highlighter-rouge&quot;&gt;author&lt;/code&gt; property. It
implicitly fetches the author when fetching the article. If you added
an &lt;code class=&quot;highlighter-rouge&quot;&gt;author&lt;/code&gt; field to the &lt;code class=&quot;highlighter-rouge&quot;&gt;RootQuery&lt;/code&gt;, this field would also need a
resolve function that fetches the required author data.&lt;/p&gt;

&lt;h2 id=&quot;a-resolve-function-can-return-a-promise&quot;&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve()&lt;/code&gt; function can return a &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt;.&lt;/h2&gt;

&lt;p&gt;In case you are wondering how the &lt;code class=&quot;highlighter-rouge&quot;&gt;article&lt;/code&gt; function above goes about
its business of fetching an article from a database, the key is that
you can call any function inside &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt; that either returns your
required data or a Promise, which eventually resolves with said data.
This allows you to make the necessary async calls to your storage backend.&lt;/p&gt;

&lt;h2 id=&quot;you-should-start-using-named-queries&quot;&gt;You should start using named queries.&lt;/h2&gt;

&lt;p&gt;Named queries are generally optional, but have a couple of benefits.
For example, the following two queries are equivalent&lt;/p&gt;

&lt;div class=&quot;language-graphql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;unnamed&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but here is why you should start to name your queries:&lt;/p&gt;

&lt;p&gt;First, you can have multiple named queries per document. Now, while you
only send one query per request, having multiple named queries in one
document allows you to put them all in one &lt;code class=&quot;highlighter-rouge&quot;&gt;.graphql&lt;/code&gt; file. Second,
only named queries allow the use of variables, e.g.:&lt;/p&gt;

&lt;div class=&quot;language-graphql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$someId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$someId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you send this query along with the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;$someId&lt;/code&gt; in the arguments,
the actual query is assembled on the server, avoiding string concatenation
on the client.&lt;/p&gt;

&lt;p&gt;This is not only less of a burden on the client, but also more secure,
as you can no longer run into injection security vulnerabilities.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;graphql-js&lt;/code&gt; these arguments are supplied as the fourth argument to
the graphql function:&lt;/p&gt;

&lt;div class=&quot;language-graphql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;1234&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;graphql(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You would typically need to get these &lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt; from the http request or
whatever other transport your particular server implementation is using.
A spec for graphql-http is currently being codified.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;We hope this article shed some light on the so far lesser understood
parts of the spec and how they affect the server implementations. We plan
on using GraphQL quite heavily for KeywordBrain and will continue to
document our findings here. In the meantime, you should follow &lt;a href=&quot;https://twitter.com/davidpfahler&quot;&gt;@davidpfahler&lt;/a&gt;
and &lt;a href=&quot;https://twitter.com/mxlje&quot;&gt;@mxlje&lt;/a&gt; on Twitter.&lt;/p&gt;

&lt;p&gt;We’d also like to thank &lt;a href=&quot;https://github.com/dschafer&quot;&gt;Dan Schafer&lt;/a&gt; and everybody in the
&lt;a href=&quot;https://graphql-slack.herokuapp.com&quot;&gt;GraphQL Slack channel&lt;/a&gt; for their feedback on this post and
answering questions about the nitty gritty details.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: This post first appeared on keywordbrain.com, a project that was dedicated to state-of-the-art SEO algorithms which has since been discontinued.&lt;/em&gt;&lt;/p&gt;</content><author><name>David Pfahler</name></author><summary type="html">If you are trying to build a GraphQL server today, you don’t have much choice: You pretty much have to use the reference implementation graphql-js. The problem is, though, that there is almost no documentation for it, yet.</summary></entry></feed>